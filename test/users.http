# Проврка всех операций с пользователем

### Создание пользователя (Позитив) #1
// @no-cookie-jar
POST http://localhost:3000/signup
Content-Type: application/json

{
  "name": "test name",
  "about": "some text",
  "avatar": "http://example.com/test",
  "email": "{{$random.alphabetic(4)}}@example.com",
  "password": "@Aa12345"
}

> {%
  client.test("Создание пользователя (Позитив) #1",
      () => client.assert(response.status === 200, "Response status is not 200"))
  client.global.set("userId", response.body._id);
  client.global.set("email", response.body.email);
%}

### Создание пользователя (Позитив) #2 [без имени]
// @no-cookie-jar
POST http://localhost:3000/signup
Content-Type: application/json

{
  "email": "{{$random.alphabetic(4)}}@example.com",
  "password": "@Aa12345"
}

> {%
    client.test("Создание пользователя (Позитив) #2 [без имени]",
    () => client.assert(response.status === 200, "Response status is not 200"))
%}


### Создание пользователя (Негатив) #1 [Не корректная структура]
// @no-cookie-jar
POST http://localhost:3000/signup
Content-Type: application/json

{
  "name": ["some name"],
  "about": "some info",
  "avatar": "url"
}

> {%
  client.test("Создание пользователя (Негатив) (Не корректные данные)",
      () => client.assert(response.status === 400, "Response status is not 400"))
%}

### Создание пользователя (Негатив) #2 [существующий email]
// @no-cookie-jar
POST http://localhost:3000/signup
Content-Type: application/json

{
  "email": "{{email}}",
  "password": "@Aa12345"
}

> {%
  client.test("Создание пользователя (Негатив) #2 [существующий email]",
    () => client.assert(response.status === 409, "Response status is not 409"))
%}

### Создание пользователя (Негатив) #3 [Не корректная ссылка]
// @no-cookie-jar
POST http://localhost:3000/signup
Content-Type: application/json

{
  "name": "test name",
  "about": "some text",
  "avatar": "https://ya1ru",
  "email": "{{$random.alphabetic(4)}}@example.com",
  "password": "@Aa12345"
}

> {%
    client.test("Создание пользователя (Негатив) #3 [Не корректная ссылка]",
        () => client.assert(response.status === 400, "Response status is not 400"))
%}

### Логин (Позитив)
// @no-cookie-jar
POST http://localhost:3000/signin
Content-Type: application/json

{
  "email": "{{email}}",
  "password": "@Aa12345"
}

> {%
    client.test("Логин (Позитив) #1", () => client.assert(response.status === 200, "Response status is not 200"))
    client.test("Логин (Позитив) #2", () => {
        const token = response.headers.valueOf('set-cookie').split(' ')[0].split('=')[1]
        client.assert(token.length > '0', `Кука не установлена`)
        client.global.set("token", token);
    })
%}



### Получение всех пользователей (Позитив)
// @no-cookie-jar
GET http://localhost:3000/users
Cookie: authorization={{token}}

> {%
  client.test("Получение всех пользователей (Позитив) #1", () => client.assert(response.status === 200, "Response status is not 200"))
  client.test("Получение всех пользователей (Позитив) #2", () => client.assert(response.body.length > 0, "Тело ответа пустое"))
%}



### Получение конкретного пользователя (Позитив)
// @no-cookie-jar
GET http://localhost:3000/users/{{userId}}
Cookie: authorization={{token}}

> {%
  client.test("Получение конкретного пользователя (Позитив)", () => client.assert(response.status === 200, "Response status is not 200"))
%}

### Получение конкретного пользователя (Негатив) #1 (не существующий пользователь)
// @no-cookie-jar
GET http://localhost:3000/users/654b6a5e7b1ccc27ce2cc78d
Cookie: authorization={{token}}

> {%
  client.test("Получение конкретного пользователя (Негатив) #1 (не существующий пользователь)",
      () => client.assert(response.status === 404, "Response status is not 404"))
%}

### Получение конкретного пользователя (Негатив) #2 [не корректный формат id]
// @no-cookie-jar
GET http://localhost:3000/users/654b6a5e7b1ccc
Cookie: authorization={{token}}

> {%
    client.test("Получение конкретного пользователя (Негатив) #1 [не корректный формат id]",
        () => client.assert(response.status === 400, "Response status is not 400"))
%}

### Получение данных пользователя (Позитив)
// @no-cookie-jar
GET http://localhost:3000/users/me
Cookie: authorization={{token}}
Content-Type: application/json

> {%
  client.test("Получение данных пользователя (Позитив)",
    () => client.assert(response.status === 200, "Response status is not 200"))
%}

### Обновление данных пользователя (Позитив)
// @no-cookie-jar
PATCH http://localhost:3000/users/me
Cookie: authorization={{token}}
Content-Type: application/json

{
  "name": "some name1",
  "about": "some info2"
}
> {%
  client.test("Обновление данных пользователя (Позитив)",
      () => client.assert(response.status === 200, "Response status is not 200"))
%}

### Обновление данных пользователя (Негатив)
// @no-cookie-jar
PATCH http://localhost:3000/users/me
Cookie: authorization={{token}}
Content-Type: application/json

{
  "name": ["some name1"],
  "about": "some info2"
}
> {%
  client.test("Обновление данных пользователя (Негатив)", () => client.assert(response.status === 400, "Response status is not 400"))
%}


### Обновление аватарки (Позитив)
// @no-cookie-jar
PATCH http://localhost:3000/users/me/avatar
Cookie: authorization={{token}}
Content-Type: application/json

{
  "avatar": "https://example.com/123"
}
> {%
  client.test("Обновление аватарки (Позитив)", () => client.assert(response.status === 200, "Response status is not 200"))
%}

### Обновление аватарки (Негатив)
// @no-cookie-jar
PATCH http://localhost:3000/users/me/avatar
Cookie: authorization={{token}}
Content-Type: application/json

{
  "avatar": ["url3"]
}
> {%
  client.test("Обновление аватарки (Негатив)", () => client.assert(response.status === 400, "Response status is not 400"))
%}